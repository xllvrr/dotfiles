global !p
def upperfirst(t):
	if len(t) < 2:
		return '' if len(t) < 1 else t.capitalize()
	return t[0].capitalize() + t[1:]
def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])
endglobal

##### Aliases #####
### Basic ###
snippet imp "Import Package" b	
import moduleName from 'module'
endsnippet

snippet imn "Import Module" b	
import 'module'
endsnippet

snippet imd "Import Destructured Module" b
import { destructuredModule } from 'module'
endsnippet

snippet ime "Import Package with Alias"	b
import * as alias from 'module'
endsnippet

snippet ima "Import as Alias" b
import { originalName as aliasName} from 'module'
endsnippet

snippet exp "Export Module" b	
export default moduleName
endsnippet

snippet exd "Export Destructured Module" b
export { destructuredModule } from 'module'
endsnippet

snippet exa "Export as Alias" b	
export { originalName as aliasName} from 'module'
endsnippet

snippet enf "Export Function" b
export const functionName = (params) => { }
endsnippet

snippet edf "Export Default" b
export default (params) => { }
endsnippet

snippet ednf "Export Default Named Function" b
export default function functionName(params) { }
endsnippet

snippet met "Method" b
methodName = (params) => { }
endsnippet

snippet fre "For Each Element" b
arrayName.forEach(element => { }
endsnippet

snippet fof "For Item of Object" b
for(let itemName of objectName { }
endsnippet

snippet fin "For Item in Name" b
for(let itemName in objectName { }
endsnippet

snippet anfn "Anonymous Function" b
(params) => { }
endsnippet

snippet nfn "Named Function" b	
const functionName = (params) => { }
endsnippet

snippet dob "Destruct Object" b
const {propName} = objectToDescruct
endsnippet

snippet dar "Destruct Array" b
const [propName] = arrayToDescruct
endsnippet

snippet sti "Set Interval Time" b	
setInterval(() => { }, intervalTime
endsnippet

snippet sto "Set Time Out" b	
setTimeout(() => { }, delayTime
endsnippet

snippet prom "Create new Promise" b	
return new Promise((resolve, reject) => { }
endsnippet

snippet cmmb "Comment Block"	
comment block
endsnippet

snippet cp "Set Prop" b	
const { } = this.props
endsnippet

snippet cs "Set State" b	
const { } = this.state
endsnippet

### React ###
snippet imr "Import React" b	
import React from 'react'
endsnippet

snippet imrd "Import Dom" b	
import ReactDOM from 'react-dom'
endsnippet

snippet imrc "Import React Component" b	
import React, { Component } from 'react'
endsnippet

snippet imrpc "Import React Pure Component" b	
import React, { PureComponent } from 'react'
endsnippet

snippet imrm "Import React Memo" b	
import React, { memo } from 'react'
endsnippet

snippet imrr "Import Router" b	
import { BrowserRouter as Router, Route, NavLink} from 'react-router-dom'
endsnippet

snippet imbr "Import Browser" b
import { BrowserRouter as Router} from 'react-router-dom'
endsnippet

snippet imbrc "Import Browser Components" b
import { Route, Switch, NavLink, Link } from react-router-dom'
endsnippet

snippet imbrr "Import Browser Route" b	
import { Route } from 'react-router-dom'
endsnippet

snippet imbrs "Import Browser Switch" b	
import { Switch } from 'react-router-dom'
endsnippet

snippet imbrl "Import Browser Link" b	
import { Link } from 'react-router-dom'
endsnippet

snippet imbrnl "Import Browser Navlink" b	
import { NavLink } from 'react-router-dom'
endsnippet

snippet imrs "Import UseState" b	
import React, { useState } from 'react'
endsnippet

snippet imrse "Import UseState and UseEffect" b
import React, { useState, useEffect } from 'react'
endsnippet

snippet redux "Import Redux" b	
import { connect } from 'react-redux'
endsnippet

snippet est "State" b	
this.state = { }
endsnippet

snippet cdm "Component Mounted" b	
componentDidMount = () => { }
endsnippet

snippet scu "Query Component Update" b	
shouldComponentUpdate = (nextProps, nextState) => { }
endsnippet

snippet cdup "Component Updated" b	
componentDidUpdate = (prevProps, prevState) => { }
endsnippet

snippet cwun "Component Unmount" b	
componentWillUnmount = () => { }
endsnippet

snippet gdsfp "Get Deprived State from Props" b	
static getDerivedStateFromProps(nextProps, prevState) { }
endsnippet

snippet gsbu "Get Snapshot Before Update" b	
getSnapshotBeforeUpdate = (prevProps, prevState) => { }
endsnippet

snippet sst "Set State" b	
this.setState({ })
endsnippet

snippet ssf "Set State Function" b	
this.setState((state, props) => return { })
endsnippet

snippet props "Prop" b	
this.props.propName
endsnippet

snippet state "State" b	
this.state.stateName
endsnippet

snippet rcontext "React Create Context" b	
const $1 = React.createContext()
endsnippet

snippet cref "React Component Create Reference" b	
this.$1Ref = React.createRef()
endsnippet

snippet fref "React Create Function Reference" b	
const ref = React.createRef()
endsnippet

snippet bnd "Bind Name" w	
this.methodName = this.methodName.bind(this)
endsnippet

### React Native ###
snippet imrn "Import from React Native" b
import { $1 } from 'react-native'
endsnippet

snippet rnstyle "Create Style Sheet" b	
const styles = StyleSheet.create({})
endsnippet

### Redux ###
snippet rxaction "Redux Action Template" b
redux action template
endsnippet

snippet rxconst "Redux Constant" b	
export const $1 = '$1'
endsnippet

snippet rxreducer "Redux Reducer Template" b	
redux reducer template
endsnippet

snippet rxselect "Redux Select Template" b	
redux selector template
endsnippet

snippet rxslice "Redux Slice Template" b
redux slice template
endsnippet

### Prop Types ###
snippet pta "PropType Array" w
PropTypes.array
endsnippet

snippet ptar "PropType Array Required" w	
PropTypes.array.isRequired
endsnippet

snippet ptb "PropType Boolean" w
PropTypes.bool
endsnippet

snippet ptbr "PropType Boolean Required" w
PropTypes.bool.isRequired
endsnippet

snippet ptf "PropType Function" w	
PropTypes.func
endsnippet

snippet ptfr "PropType Function Required" w	
PropTypes.func.isRequired
endsnippet

snippet ptn "PropType Number" w	
PropTypes.number
endsnippet

snippet ptnr "PropType Number Required" w	
PropTypes.number.isRequired
endsnippet

snippet pto "PropType Object" w
PropTypes.object
endsnippet

snippet ptor "PropType Object Required" w	
PropTypes.object.isRequired
endsnippet

snippet pts "PropType String" w
PropTypes.string
endsnippet

snippet ptsr "PropType String Required" w	
PropTypes.string.isRequired
endsnippet

snippet ptnd "PropType Node" w
PropTypes.node
endsnippet

snippet ptndr "PropType Node Required" w	
PropTypes.node.isRequired
endsnippet

snippet ptel "PropType Element" w
PropTypes.element
endsnippet

snippet ptelr "PropType Element Required" w	
PropTypes.element.isRequired
endsnippet

snippet pti "PropType Instance" w
PropTypes.instanceOf(name)
endsnippet

snippet ptir "PropType Instance Required" w	
PropTypes.instanceOf(name).isRequired
endsnippet

snippet pte "PropType OneOf" w
PropTypes.oneOf([name])
endsnippet

snippet pter "PropType OneOf Required" w	
PropTypes.oneOf([name]).isRequired
endsnippet

snippet ptet "PropType OfType" w
PropTypes.oneOfType([name])
endsnippet

snippet ptetr "PropType OfType Required" w	
PropTypes.oneOfType([name]).isRequired
endsnippet

snippet ptao "PropType ArrayOf" w
PropTypes.arrayOf(name)
endsnippet

snippet ptaor "PropType ArrayOf Required" w	
PropTypes.arrayOf(name).isRequired
endsnippet

snippet ptoo "PropType ObjectOf" w
PropTypes.objectOf(name)
endsnippet

snippet ptoor "PropType ObjectOf Required" w	
PropTypes.objectOf(name).isRequired
endsnippet

snippet ptsh "PropType Shape" w
PropTypes.shape({ })
endsnippet

snippet ptshr "PropType Shape Required" w	
PropTypes.shape({ }).isRequired
endsnippet

snippet ptany "PropType Any" w	
PropTypes.any
endsnippet

snippet ptypes "PropTypes Define" w
static propTypes = {}
endsnippet

### Console ###
snippet clg "Console Log" w	
console.log(object)
endsnippet

snippet clo "Console Log Object" w	
console.log(`object`, object)
endsnippet

snippet clj "Console Log Json" w	
console.log(`object`, JSON.stringify(object, null, 2))
endsnippet

snippet ctm "Console Time" w	
console.time(`timeId`)
endsnippet

snippet cte "Console Time End" w	
console.timeEnd(`timeId`)
endsnippet

snippet cas "Console Assert" w	
console.assert(expression,object)
endsnippet

snippet ccl "Console Clear" w	
console.clear()
endsnippet

snippet cco "Console Count" w	
console.count(label)
endsnippet

snippet cdi "Console Directory" w	
console.dir
endsnippet

snippet cer "Console Error" w	
console.error(object)
endsnippet

snippet cgr "Console Group" w	
console.group(label)
endsnippet

snippet cge "Console Group End" w	
console.groupEnd()
endsnippet

snippet ctr "Console Trace" w	
console.trace(object)
endsnippet

snippet cwa "Console Warn" w	
console.warn
endsnippet

snippet cin "Console Info" w	
console.info
endsnippet

##### React Components #####
### Class Components ###
snippet rcc "React Class Component" b
import React, { Component } from 'react'

export default class FileName extends Component {
	render() {
		return <div>$2</div>
	}
}
endsnippet

snippet rce "React Class Component Exported" b
import React, { Component } from 'react'

export class FileName extends Component {
	render() {
		return <div>$2</div>
	}
}

export default $1
endsnippet

snippet rcep "React Class Component Exported (with PropTypes)" b
import React, { Component } from 'react'
import PropTypes from 'prop-types'

export class FileName extends Component {
	static propTypes = {}

	render() {
		return <div>$2</div>
	}
}

export default $1
endsnippet

snippet rpc "React Pure Component" b
import React, { PureComponent } from 'react'

export default class FileName extends PureComponent {
	render() {
		return <div>$2</div>
	}
}
endsnippet

snippet rpcp "React Pure Component (with PropTypes)" b
import React, { PureComponent } from 'react'
import PropTypes from 'prop-types'

export default class FileName extends PureComponent {
	static propTypes = {}

	render() {
		return <div>$2</div>
	}
}
endsnippet

snippet rpce "React Pure Component Exported" b
import React, { PureComponent } from 'react'
import PropTypes from 'prop-types'

export class FileName extends PureComponent {
	static propTypes = {}

	render() {
		return <div>$2</div>
	}
}

export default FileName
endsnippet

snippet rccp "React Class Component (with PropTypes)" b
import React, { Component } from 'react'
import PropTypes from 'prop-types'

export default class FileName extends Component {
	static propTypes = {
		$2: $3,
	}

	render() {
		return <div>$4</div>
	}
}
endsnippet

### Function Components ###
snippet rfcp "React Function Component (with PropTypes)" b
import React from 'react'
import PropTypes from 'prop-types'

function $1(props) {
	return <div>$0</div>
}

$1.propTypes = {}

export default $1
endsnippet

snippet rfc "React Function Component" b
import React from 'react'

export default function $1() {
	return <div>$0</div>
}
endsnippet

snippet rfce "React Function Component Exported" b
import React from 'react'

function $1() {
	return <div>$0</div>
}

export default $1
endsnippet

snippet rafcp "React Arrow Function Component (with PropTypes)" b
import React from 'react'
import PropTypes from 'prop-types'

const $1 = (props) => {
	return <div>$0</div>
}

$1.propTypes = {}

export default $1
endsnippet

snippet rafc "React Arrow Function Component" b
import React from 'react'

export const $1 = () => {
	return <div>$0</div>
}
endsnippet

snippet rafce "React Arrow Function Component Exported" b
import React from 'react'

const $1 = () => {
	return <div>$0</div>
}

export default $1
endsnippet

### Memo Components ###
snippet rmc "React Memo Component" b
import React, { memo } from 'react'

export default memo(function $1() {
		return <div>$0</div>
})
endsnippet

snippet rmcp "React Memo Component (with PropTypes)" b
import React, { memo } from 'react'
import PropTypes from 'prop-types'

const $1 = memo(function $1(props) {
		return <div>$0</div>
})

$1.propTypes = {}

export default $1
endsnippet

### Redux Components ###
snippet rcredux "React Class Component Redux" b
import React, { Component } from 'react'
import { connect } from 'react-redux'

export class FileName extends Component {
	render() {
		return <div>$4</div>
	}
}

const mapStateToProps = (state) => ({})

const mapDispatchToProps = {}

export default connect(mapStateToProps, mapDispatchToProps)(FileName)
endsnippet

snippet rcredux "React Class Component Redux (with PropTypes)" b
import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'

export class FileName extends Component {
	static propTypes = {
		$2: $3,
	}

	render() {
		return <div>$4</div>
	}
}

const mapStateToProps = (state) => ({})

const mapDispatchToProps = {}

export default connect(mapStateToProps, mapDispatchToProps)(FileName)
endsnippet

snippet rcredux "React Function Component Redux" b
import React, { Component } from 'react'
import { connect } from 'react-redux'

export const FileName = () => {
	return <div>$4</div>
}

const mapStateToProps = (state) => ({})

const mapDispatchToProps = {}

export default connect(mapStateToProps, mapDispatchToProps)(FileName)
endsnippet

snippet rcreduxp "React Function Component Redux (with PropTypes)" b
import React, { Component } from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'

export const FileName = () => {
	return <div>$4</div>
}

FileName.propTypes = {
	$2: $3,
}

const mapStateToProps = (state) => ({})

const mapDispatchToProps = {}

export default connect(mapStateToProps, mapDispatchToProps)(FileName)
endsnippet

snippet reduxmap "Redux Mapping" b
const mapStateToProps = (state) => ({})

const mapDispatchToProps = {}
endsnippet

##### React Native Components ##### 
snippet rnc "React Native Component" b
import React, { Component } from 'react'
import { Text, View } from 'react-native'

export default class FileName extends Component {
	render() {
		return (
				<View>
				<Text> $2 </Text>
				</View>
			   )
	}
}
endsnippet

snippet rnf "React Native Function" b
import React from 'react'
import { View, Text } from 'react-native'

export default function $1() {
	return (
			<View>
			<Text> $2 </Text>
			</View>
		   )
}
endsnippet

snippet rnfs "React Native Function Stylesheet" b
import React from 'react'
import { StyleSheet, View, Text } from 'react-native'

export default function $1() {
	return (
			<View>
			<Text> $2 </Text>
			</View>
		   )
}

const styles = StyleSheet.create({})
endsnippet

snippet rnfe "React Native Function Exported" b
	import React from 'react'
	import { View, Text } from 'react-native'

	const $1 = () => {
		return (
				<View>
				<Text> $2 </Text>
				</View>
			   )
	}

export default $1
endsnippet

snippet rnfes "React Native Function Exported Stylesheet" b
import React from 'react'
import { StyleSheet, View, Text } from 'react-native'

const $1 = () => {
	return (
			<View>
			<Text> $2 </Text>
			</View>
		   )
}

export default $1

const styles = StyleSheet.create({})
endsnippet

snippet rncs "React Native Component Stylesheet" b
import React, { Component } from 'react'
import { Text, StyleSheet, View } from 'react-native'

export default class FileName extends Component {
  render() {
    return (
      <View>
        <Text> $2 </Text>
      </View>
    )
  }
}

const styles = StyleSheet.create({})
endsnippet

snippet rnce "React Native Component Exported" b
import React, { Component } from 'react'
import { Text, View } from 'react-native'

export class FileName extends Component {
  render() {
    return (
      <View>
        <Text> $2 </Text>
      </View>
    )
  }
}

export default $1
endsnippet

##### Others #####
snippet /** "Comment Block" b
/**
 * $0
 */
endsnippet

snippet desc "Describe Test" b
describe('$1', () => {
  $2
})
endsnippet

snippet test "Test Block" b
test('should $1', () => {
  $2
})
endsnippet

snippet tit "Test IT Block" b
it('should $1', () => {
  $2
})
endsnippet

snippet stest "React Test File" b
import React from 'react'
import renderer from 'react-test-renderer'

import { $1 } from '../$1'

describe('<$1 />', () => {
		const defaultProps = {}
		const wrapper = renderer.create(<$1 {...defaultProps} />)

		test('render', () => {
				expect(wrapper).toMatchSnapshot()
				})
		})
endsnippet

snippet srtest "React Redux Test File" b
import React from 'react'
import renderer from 'react-test-renderer'
import { Provider } from 'react-redux'

import store from 'src/store'
import { $1 } from '../$1'

describe('<$1 />', () => {
		const defaultProps = {}
		const wrapper = renderer.create(
				<Provider store={store}>
				<$1 {...defaultProps} />)
		</Provider>,
		)

			test('render', () => {
					expect(wrapper).toMatchSnapshot()
					})
})
endsnippet

snippet sntest "React Native Test File" b
import 'react-native'
import React from 'react'
import renderer from 'react-test-renderer'

import $1 from '../$1'

describe('<$1 />', () => {
		const defaultProps = {}

		const wrapper = renderer.create(<$1 {...defaultProps} />)

		test('render', () => {
				expect(wrapper).toMatchSnapshot()
				})
		})
endsnippet

snippet snrtest "React Native Redux Test File" b
import 'react-native'
import React from 'react'
import renderer from 'react-test-renderer'
import { Provider } from 'react-redux'

import store from 'src/store/configureStore'
import $1 from '../$1'

describe('<$1 />', () => {
		const defaultProps = {}
		const wrapper = renderer.create(
				<Provider store={store}>
				<$1 {...defaultProps} />
				</Provider>,
				)

		test('render', () => {
				expect(wrapper).toMatchSnapshot()
				})
		})
endsnippet

snippet hoc "Higher Order Component" b
import React from 'react'
import PropTypes from 'prop-types'

export default (WrappedComponent) => {
	const hocComponent = ({ ...props }) => <WrappedComponent {...props} />

		hocComponent.propTypes = {}

	return hocComponent
}
endsnippet

snippet hocredux "Higher Order Component Redux" b
import React from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'

export const mapStateToProps = (state) => ({})

	export const mapDispatchToProps = {}

	export const $1 = (WrappedComponent) => {
		const hocComponent = ({ ...props }) => <WrappedComponent {...props} />

			hocComponent.propTypes = {}

		return hocComponent
	}

	export default (WrapperComponent) =>
connect(mapStateToProps, mapDispatchToProps)($1(WrapperComponent))
endsnippet

##### Hooks #####
snippet useS "useState()" b
const [$1, set$3`!p snip.rv=upperfirst(t[1])`] = useState($2)
endsnippet

snippet useE "useEffect()" b
useEffect(() => {
	$0
}, [$1])
endsnippet

snippet useEA "useEffect() async" b
useEffect(() => {
	let cancelled = false

	;(async function ${4:doWork}() {
		${1:// async work here}
		if (cancelled) {
			return
		}

		$2
	})()

	return () => {
		cancelled = true
	}
}, [$3])
endsnippet

snippet useC "useContext()" b
const ${1:context} = useContext($2)
endsnippet

snippet useRed "useReducer(reducer, initialState, getInitialState)" b
const [${1:state}, ${2:dispatch}] = useReducer(function reducer(state, action) {
	return state
}, ${3:null})
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback(($2) => ${3:{
	$4
}}, [$5])
endsnippet

snippet useM "useMemo(fn, inputs)" b
const ${1:memoized} = useMemo(() => ${2:{
	$3
}}, [$4])
endsnippet

snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef(${2:null})
endsnippet

snippet useI "useImperitiveHandle(ref, createHandle, [inputs])" b
useImperitiveHandle(${1:ref}, ${4:() => ({
	$2
})}, ${5:[$3]})
endsnippet

snippet useL "useLayoutEffect()" b
useLayoutEffect(() => {
	$0
}, [$1])
endsnippet

snippet useDV "useDebugValue(value)" b
useDebugValue(${1:null})
endsnippet

### "Inline" versions of hooks ###

priority -1
snippet useC "useContext()" w
useContext$2($1)
endsnippet

snippet useCB "useCallback(fn, inputs)" w
useCallback(($1) => ${2:{
	$3
}}, [$4])
endsnippet

snippet useM "useMemo(fn, inputs)" w
useMemo(() => ${1:{
	$2
}}, [$3])
endsnippet

snippet useR "useRef(defaultValue)" w
useRef$2(${1:null})$0
endsnippet

priority 0
